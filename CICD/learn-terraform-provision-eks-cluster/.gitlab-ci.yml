stages:
  - deploy
  - cleanup

# Use a container image that already has Terraform installed
default:
  image: hashicorp/terraform:1.6
  before_script:
    - |
      cd "$TF_ROOT"
      terraform init -input=false

variables:
  TF_ROOT: "."               # change to your TF folder if needed, e.g. infra/eks
  TF_IN_AUTOMATION: "true"

# ------------------------------
# ðŸš€ Apply job
# ------------------------------
apply:
  stage: deploy
  variables:
    SLACK_MESSAGE: "ðŸš€ *Terraform apply* started for *$CI_PROJECT_NAME* on branch *$CI_COMMIT_REF_NAME* by *$GITLAB_USER_NAME*"
  script:
    - apk add --no-cache curl
    - 'curl -X POST --data-urlencode "payload={\"text\": \"$SLACK_MESSAGE\"}" $SLACK_WEBHOOK_URL'
    - echo "ðŸš€ Applying Terraform..."
    - terraform apply -auto-approve
  when: manual
  allow_failure: false

# ------------------------------
# ðŸ§¹ Destroy job
# ------------------------------
destroy:
  stage: cleanup
  variables:
    SLACK_MESSAGE: "ðŸ§¹ *Terraform destroy* started for *$CI_PROJECT_NAME* after apply job"
  script:
    - apk add --no-cache curl
    - 'curl -X POST --data-urlencode "payload={\"text\": \"$SLACK_MESSAGE\"}" $SLACK_WEBHOOK_URL'
    - echo "ðŸ§¹ Destroying after 10 min..."
    - terraform destroy -auto-approve
  when: delayed
  start_in: 10 min
  needs:
    - job: apply
      artifacts: false
